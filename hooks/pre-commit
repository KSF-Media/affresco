#!/usr/bin/env perl

BEGIN {
    # This is to get git hooks working with magit
    # https://magit.vc/manual/magit/My-Git-hooks-work-on-the-command_002dline-but-not-inside-Magit.html
    delete @ENV{qw(GIT_LITERAL_PATHSPECS)};
}

use strict;
use warnings;

use File::Basename;
use Cwd;

my $CWD = getcwd;
my @APP_DIRECTORIES = glob('apps/*');
my $BUILD_HASH_FILENAME = '.build-size-sha256';

# App name and app build directory.
# For JS projects, we need to point to the most relevant
# PureScript package they use
my %APPS_TO_WATCH = (
    'mitt-konto'      => '/apps/mitt-konto',
    'prenumerera'     => '/apps/prenumerera',
    'vetrina-staging' => '/packages/vetrina',
    'app-article'     => '/packages/user'
);

sub create_deploy_trigger() {
    foreach my $app_name (keys %APPS_TO_WATCH) {
        my $full_app_dir = "$CWD/apps/$app_name";
        my $app_build_dir = $CWD . $APPS_TO_WATCH{$app_name};

        # Calculate hash of build directory and write to file if changed
        my $build_hash_output = `find $app_build_dir/output -type f | xargs cat | sha256sum`;
        my ($build_hash) = split(' ', $build_hash_output);
        my $build_hash_file = "$full_app_dir/$BUILD_HASH_FILENAME";

        my $current_build_hash = get_current_build_hash($build_hash_file);

        if ($current_build_hash eq 0) {
            print "Build hash for $app_name does not exist, creating one ..\n";
            write_build_hash($build_hash, $build_hash_file);
        }
        elsif ($current_build_hash ne $build_hash) {
            print "Build hash for $app_name has changed, updating $BUILD_HASH_FILENAME ..\n";
            write_build_hash($build_hash, $build_hash_file);
        }
        else {
            print "No changes in the $app_name build hash.\n";
        }
    }
    git_commit_updated_hashes();
}

sub get_current_build_hash() {
    my $build_hash_file = shift;
    open(FH, '<', $build_hash_file)
        or print "Could not check current build size, failed to open file '$build_hash_file' $!\n"
        && return 0;
    chomp(my @build_file_content = <FH>);
    my ($build_hash) = reverse @build_file_content;
    close FH;
    return $build_hash;
}

sub write_build_hash() {
    my $build_size = shift;
    my $build_hash_file = shift;
    open(FH, '>', "$build_hash_file")
        or die "Could not open file '$build_hash_file' $!";
    print FH "# SHA256 of the content of the build directory.\n"
           . "# This is used for triggering project deployment when there are updated dependecies.\n"
           . "$build_size\n";
    close FH;
}

sub git_commit_updated_hashes() {
    # Perl multiplies exit status codes by 256. Go figure ¯\_(ツ)_/¯
    # See `system` in http://www.cs.cmu.edu/afs/cs/usr/rgs/mosaic/pl-exp-sys.html
    my $git_diff_status = system("git diff --exit-code --quiet \\*$BUILD_HASH_FILENAME") / 256;
    if ($git_diff_status == 1) {
        system("git add \\*$BUILD_HASH_FILENAME && git commit -m 'Update build hash (automatic)' \\*$BUILD_HASH_FILENAME");
        print "Commited updated build hashes.\n";
    }
}

create_deploy_trigger();
